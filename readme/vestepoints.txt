# VestePoints - Doação de Roupas com Recompensas 

## Sobre o Projeto

O VestePoints é uma página de destino (landing page) desenvolvida para promover um programa de doação de roupas
que recompensa os doadores com créditos e descontos exclusivos em lojas parceiras. A iniciativa visa incentivar a 
economia circular, reduzir o desperdício de vestuário e gerar impacto social, ajudando comunidades carentes.

A página principal (index.html) serve como a porta de entrada, apresentando a proposta, o funcionamento do programa 
e os benefícios de participar.

-----

## Tecnologias Utilizadas

Este projeto é uma estrutura estática baseada nas seguintes tecnologias e bibliotecas:

  * HTML5: estrutura básica do documento.
  * CSS3: estilização (classes customizadas em "style.css" e estilos padrão do Bootstrap).
  * Bootstrap 5.3: framework CSS para layout responsivo, componentes (Navbar, Botões, Grid) e utilitários.
  * Bootstrap Icons 1.10.5: biblioteca de ícones para elementos visuais.
  * Google Fonts: utilização das fontes Montserrat e Roboto para tipografia moderna.
  * JavaScript: utilização mínima para funcionalidades do Bootstrap (como a Navbar responsiva) e um 
  script de *logout básico (embora o "index.html" não seja a página de login, a função de "logoutAdmin" está presente).

-----

## Estrutura do Arquivo "index.html"

O arquivo "index.html" está dividido nas seguintes seções principais:

### 1\ <head>: Metadados e Dependências

  * **Meta Tags:** Define a codificação (`UTF-8`), a *viewport* para responsividade e o título da página (`VestePoints - Doação de Roupas`).
  * **Google Fonts:** Links para as fontes Montserrat e Roboto.
  * **Bootstrap CSS:** Link para o CDN do Bootstrap 5.3.
  * **Bootstrap Icons:** Link para o CDN dos ícones.
  * **Custom CSS:** Link para o arquivo de estilos personalizado (`style.css`).

### 2\ <body>: Conteúdo Principal

  * Navbar:
      * Componente Bootstrap responsivo e fixo (`sticky-top`).
      * Contém a **Logo/Marca** (`VestePoints`).
      * **Links de Navegação Centralizados:** *Home*, *Como Funciona* e *Benefícios* (usando âncoras internas).
      * **Botão de Ação à Direita:** Link para o *Login Admin*.
  * Hero Section ("<header>"):
      * Principal seção de impacto visual.
      * Título e subtítulo com a proposta de valor (**"Transforme suas doações em descontos\!"**).
      * **Chamadas para Ação (CTAs): Botões para "Cadastre-se" e "Login".
  * Como Funciona Section ("#como-funciona"):
      * Detalha o processo em três passos simples e visuais, utilizando ícones do Bootstrap:
        1.  Cadastre-se.
        2.  Doe Roupas.
        3.  Ganhe Créditos.
  * Benefícios Section ("#beneficios"):
      * Destaca as vantagens de participar, também utilizando ícones:
        1.  Descontos Exclusivos.
        2.  Impacto Social.
        3.  Recompensas.
  * Footer ("<footer>"):
      * Rodapé com informações de copyright.
      * Links de navegação secundária (Privacidade, Termos de Uso e Contato).
  * **Bootstrap JS e Script Customizado**:
      * Inclusão dos *scripts* do Popper.js e Bootstrap para funcionalidades dinâmicas.
      * A função **`logoutAdmin()`** é incluída para manipulação futura ou em outras páginas, utilizando `localStorage` para simular o estado de *login* de um administrador.

-----

## Como Rodar o Projeto (Localmente)

Não há um *backend* complexo necessário para visualizar esta página. Siga os passos:

1.  **Clone o Repositório:** Obtenha os arquivos do projeto.
2.  **Abra o `index.html`:** Simplesmente abra o arquivo `index.html` em qualquer navegador moderno (Chrome, Firefox, Edge, etc.).
3.  **Observação:** Certifique-se de que os arquivos de estilo (`style.css`) e os *scripts* referenciados (como o `cadastro-doador.html` e `login.html`) estejam na mesma estrutura de diretório, caso contrário, os links internos não funcionarão corretamente.

-----

## Personalização e Estilo

A estilização primária é feita através das classes do **Bootstrap**.

### Estilos Customizados

Para alterar a aparência além do padrão do Bootstrap, edite o arquivo **`style.css`**. É lá que você encontrará as regras para:

  * **Tipografia:** Definição das famílias de fontes ("Montserrat" e "Roboto").
  * **Cores e Fundo:** Estilos da **Hero Section** (`.hero-section`).
  * **Navbar Customizada:** Estilos específicos para o alinhamento dos links (`.nav-center`) e o *layout* customizado (`.custom-navbar`).
  * **Itens de Destaque:** Estilização das seções *Como Funciona* e *Benefícios* (`.feature-item`).

### Variáveis e Cores

É recomendável utilizar **Variáveis CSS** no arquivo `style.css` para gerenciar cores e *padding* de forma mais eficiente e centralizada.

```css
/* Exemplo de onde definir variáveis no style.css */
:root {
    --vp-primary-color: #0d6efd; /* Cor principal, similar ao btn-primary do Bootstrap */
    --vp-secondary-color: #6c757d; /* Cor secundária */
    /* ... outras variáveis ... */
}
```

-----

## Contribuições

Sinta-se à vontade para sugerir melhorias, corrigir bugs ou expandir a funcionalidade. Para contribuir, siga o fluxo padrão:

1.  Faça um *fork* do projeto.
2.  Crie uma *branch* para sua funcionalidade (`git checkout -b feature/melhoria-x`).
3.  Faça o *commit* das suas alterações.
4.  Faça o *push* para a *branch* (`git push origin feature/melhoria-x`).
5.  Abra um *Pull Request* (PR).